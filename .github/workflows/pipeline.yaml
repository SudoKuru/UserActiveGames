name: "Pipeline"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency: main_workflow

permissions:
  contents: write
  pages: write
  checks: write
  id-token: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Add .env file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_AUTH0_AUDIENCE: ${{ secrets.BACKEND_AUTH0_AUDIENCE }}
          envkey_AUTH0_BASE_URL: ${{ secrets.BACKEND_AUTH0_BASE_URL }}
          envkey_AUTH0_CLIENT_ID: ${{ secrets.BACKEND_AUTH0_CLIENT_ID }}
          envkey_AUTH0_CLIENT_SECRET: ${{ secrets.BACKEND_AUTH0_CLIENT_SECRET }}
          envkey_AUTH0_USERNAME: ${{ secrets.BACKEND_AUTH0_USERNAME }}
          envkey_AUTH0_PASSWORD: ${{ secrets.BACKEND_AUTH0_PASSWORD }}
          envkey_AUTH0_SCOPE: ${{ secrets.BACKEND_AUTH0_SCOPE }}
          envkey_MONGO_URL: mongodb://mongo:27017
          directory: .
          file_name: .env
          fail_on_empty: true

      - name: Run Docker image
        run: |
          npm run app

      - name: Print env file
        run: cat ".env"

      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash

      - name: Run API tests
        run: |
          npm ci
          npm run test:CIintegration

      - name: Test Reporter
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Mocha Integration Tests
          path: test-results.json
          reporter: mocha-json

      - name: Dump mongo logs
        if: failure()
        uses: jwalton/gh-docker-logs@v2

  deploy_docker_image:
    name: Deploy Docker Image
    #if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ test ]
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}



  deploy_documentation:
    name: Deploy Documentation
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ deploy_docker_image ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - run: npm ci
      - run: npm run update-docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'docs/'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  deploy:
    name: Deploy to AWS Lambda
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ deploy_documentation ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [ dev, prod ]
    environment: ${{ matrix.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{secrets.BACKEND_AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.BACKEND_AWS_SECRET_ACCESS_KEY}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Add .env file
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          envkey_AUTH0_BASE_URL: ${{ secrets.AUTH0_BASE_URL }}
          envkey_MONGO_URL: ${{secrets.DATABASE_URL}}
          directory: .
          file_name: .env
          fail_on_empty: true

      - run: npm ci
      - run: npm i serverless

      - name: ${{ matrix.environment }} Deployment
        run: npm run deploy
        env:
          STAGE: ${{ matrix.environment }}